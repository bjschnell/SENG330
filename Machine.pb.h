// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Machine.proto

#ifndef PROTOBUF_Machine_2eproto__INCLUDED
#define PROTOBUF_Machine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace machines {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Machine_2eproto();
void protobuf_AssignDesc_Machine_2eproto();
void protobuf_ShutdownFile_Machine_2eproto();

class Machine;
class machinelist;

// ===================================================================

class Machine : public ::google::protobuf::Message {
 public:
  Machine();
  virtual ~Machine();

  Machine(const Machine& from);

  inline Machine& operator=(const Machine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Machine& default_instance();

  void Swap(Machine* other);

  // implements Message ----------------------------------------------

  inline Machine* New() const { return New(NULL); }

  Machine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Machine& from);
  void MergeFrom(const Machine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Machine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TYPE = 1;
  bool has_type() const;
  void clear_type();
  static const int kTYPEFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string ID = 2;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:machines.Machine)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend void  protobuf_AddDesc_Machine_2eproto();
  friend void protobuf_AssignDesc_Machine_2eproto();
  friend void protobuf_ShutdownFile_Machine_2eproto();

  void InitAsDefaultInstance();
  static Machine* default_instance_;
};
// -------------------------------------------------------------------

class machinelist : public ::google::protobuf::Message {
 public:
  machinelist();
  virtual ~machinelist();

  machinelist(const machinelist& from);

  inline machinelist& operator=(const machinelist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const machinelist& default_instance();

  void Swap(machinelist* other);

  // implements Message ----------------------------------------------

  inline machinelist* New() const { return New(NULL); }

  machinelist* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const machinelist& from);
  void MergeFrom(const machinelist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(machinelist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .machines.Machine machine = 1;
  int machine_size() const;
  void clear_machine();
  static const int kMachineFieldNumber = 1;
  const ::machines::Machine& machine(int index) const;
  ::machines::Machine* mutable_machine(int index);
  ::machines::Machine* add_machine();
  ::google::protobuf::RepeatedPtrField< ::machines::Machine >*
      mutable_machine();
  const ::google::protobuf::RepeatedPtrField< ::machines::Machine >&
      machine() const;

  // @@protoc_insertion_point(class_scope:machines.machinelist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::machines::Machine > machine_;
  friend void  protobuf_AddDesc_Machine_2eproto();
  friend void protobuf_AssignDesc_Machine_2eproto();
  friend void protobuf_ShutdownFile_Machine_2eproto();

  void InitAsDefaultInstance();
  static machinelist* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Machine

// required string TYPE = 1;
inline bool Machine::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Machine::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Machine::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Machine::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Machine::type() const {
  // @@protoc_insertion_point(field_get:machines.Machine.TYPE)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Machine::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machines.Machine.TYPE)
}
inline void Machine::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machines.Machine.TYPE)
}
inline void Machine::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machines.Machine.TYPE)
}
inline ::std::string* Machine::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:machines.Machine.TYPE)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Machine::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Machine::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:machines.Machine.TYPE)
}

// required string ID = 2;
inline bool Machine::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Machine::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Machine::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Machine::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Machine::id() const {
  // @@protoc_insertion_point(field_get:machines.Machine.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Machine::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machines.Machine.ID)
}
inline void Machine::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machines.Machine.ID)
}
inline void Machine::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machines.Machine.ID)
}
inline ::std::string* Machine::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:machines.Machine.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Machine::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Machine::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:machines.Machine.ID)
}

// -------------------------------------------------------------------

// machinelist

// repeated .machines.Machine machine = 1;
inline int machinelist::machine_size() const {
  return machine_.size();
}
inline void machinelist::clear_machine() {
  machine_.Clear();
}
inline const ::machines::Machine& machinelist::machine(int index) const {
  // @@protoc_insertion_point(field_get:machines.machinelist.machine)
  return machine_.Get(index);
}
inline ::machines::Machine* machinelist::mutable_machine(int index) {
  // @@protoc_insertion_point(field_mutable:machines.machinelist.machine)
  return machine_.Mutable(index);
}
inline ::machines::Machine* machinelist::add_machine() {
  // @@protoc_insertion_point(field_add:machines.machinelist.machine)
  return machine_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::machines::Machine >*
machinelist::mutable_machine() {
  // @@protoc_insertion_point(field_mutable_list:machines.machinelist.machine)
  return &machine_;
}
inline const ::google::protobuf::RepeatedPtrField< ::machines::Machine >&
machinelist::machine() const {
  // @@protoc_insertion_point(field_list:machines.machinelist.machine)
  return machine_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace machines

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Machine_2eproto__INCLUDED
